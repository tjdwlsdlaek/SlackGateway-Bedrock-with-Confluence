// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
{
  "Outputs": {
    "SlackBotEndpointOutput": {
      "Description": "The URL used to verify the Slack app.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "SlackBotEndpoint403F5293",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
          ],
        ],
      },
    },
    "SlackBotTokenOutput": {
      "Description": "The Secret containing the Slack Bot Token.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region",
            },
            ".console.aws.amazon.com/secretsmanager/secret?name=",
            {
              "Fn::Join": [
                "-",
                [
                  {
                    "Fn::Select": [
                      0,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "SlackBotTokenAD332752",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "SlackBotTokenAD332752",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
            "&region=",
            {
              "Ref": "AWS::Region",
            },
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "SlackBotApiAccessLog542ADE04": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "SlackBotEndpoint403F5293": {
      "Properties": {
        "Description": "Proxy for Bedrock Slack bot backend.",
        "Name": "SlackBotEndpoint",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "SlackBotEndpointANY2A86731F": {
      "Properties": {
        "ApiId": {
          "Ref": "SlackBotEndpoint403F5293",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "ANY /",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "SlackBotEndpointANYBotHandlerIntegrationE62FB5B4",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "SlackBotEndpointANYBotHandlerIntegrationE62FB5B4": {
      "Properties": {
        "ApiId": {
          "Ref": "SlackBotEndpoint403F5293",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SlackBotLambdaFCBBD6BA",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "SlackBotEndpointANYBotHandlerIntegrationPermissionE5A1FC20": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SlackBotLambdaFCBBD6BA",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SlackBotEndpoint403F5293",
              },
              "/*/*/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SlackBotEndpointDefaultStage16704229": {
      "Properties": {
        "AccessLogSettings": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "SlackBotApiAccessLog542ADE04",
              "Arn",
            ],
          },
          "Format": "{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","userAgent":"$context.identity.userAgent"}",
        },
        "ApiId": {
          "Ref": "SlackBotEndpoint403F5293",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "SlackBotLambdaFCBBD6BA": {
      "DependsOn": [
        "SlackBotRoleDefaultPolicy4314B589",
        "SlackBotRole4F1E5090",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "The runtime is pinned for stability.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "
## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: MIT-0

import json
import os
import boto3
import urllib3
from botocore.response import StreamingBody

# Initialize AWS clients for Bedrock and Secrets Manager
bedrock_runtime_client = boto3.client('bedrock-runtime')
secretsmanager_client = boto3.client('secretsmanager')

# Set the Slack API URL and fetch the Slack token from Secrets Manager
SLACK_URL = 'https://slack.com/api/chat.postMessage'
slack_token = json.loads(
	secretsmanager_client.get_secret_value(
		SecretId=os.environ.get('token')
	)['SecretString']
)['token']
http = urllib3.PoolManager()

def handle_challenge(event):
	"""
	Handles the Slack challenge event for verifying the URL.
	https://api.slack.com/events/url_verification

	Args:
		event (dict): The event data from the Slack challenge.

	Returns:
		dict: A response dictionary with the status code and the challenge value.
	"""
	body = json.loads(event['body'])

	return {
		'statusCode': 200,
		'body': body['challenge']
	}

def handle_message(event):
	"""
	Handles the Slack message event and calls the Bedrock AI model.

	Args:
		event (dict): The event data from the Slack message.

	Returns:
		dict: A response dictionary with the status code and a message.
	"""
	slack_body = json.loads(event['body'])
	slack_text = slack_body.get('event').get('text')
	slack_user = slack_body.get('event').get('user')
	channel = slack_body.get('event').get('channel')

	# Replace the bot username with an empty string
	msg = call_bedrock(slack_text.replace('<@U06D5B8AR8R>', ''))

	# Prepare the data for the Slack API request
	data = {
		'channel': channel,
		'text': f"<@{slack_user}> {msg}"
	}

	headers = {
		'Authorization': f'Bearer {slack_token}',
		'Content-Type': 'application/json',
	}

	# Send the message to the Slack API
	http.request(
		'POST',
		SLACK_URL,
		headers=headers,
		body=json.dumps(data)
	)

	return {
		'statusCode': 200,
		'body': json.dumps({'msg': "message recevied"})
	}

def call_bedrock(question):
	"""
	Calls the Bedrock AI model with the given question.

	Args:
		question (str): The question to ask the Bedrock AI model.

	Returns:
		str: The response from the Bedrock AI model.
	"""
	body = json.dumps({
		"prompt": f"\\n\\nHuman: Act as a slack bot. {question}\\n\\nAssistant:",
		"maxTokens": 3000,
		"temperature": 0.5,
		"topP": 1
	})

	model_id = 'ai21.j2-ultra-v1'
	accept = 'application/json'
	content_type = 'application/json'

	# Call the Bedrock AI model
	response = bedrock_runtime_client.invoke_model(
		body=body,
		modelId=model_id,
		accept=accept,
		contentType=content_type
	)

	# Process the response from the Bedrock AI model
	if isinstance(response.get('body'), StreamingBody):
		response_content = response['body'].read().decode('utf-8')
	else:
		response_content = response.get('body')

	response_body = json.loads(response_content)

	return response_body.get('completions')[0].get('data').get('text')

def handler(event, context):
	"""
	The main Lambda handler function.

	Args:
		event (dict): The event data from the Slack API.
		context (dict): The Lambda context object.

	Returns:
		dict: The response dictionary based on the event type.
	"""
	# Respond to the Slack Challenge if presented, otherwise handle the Bedrock interaction
	event_body = json.loads(event.get("body"))
	response = None
	if event_body.get("type") == "url_verification":
		response = handle_challenge(event)
	else:
		response = handle_message(event)

	return response
	    ",
        },
        "Description": "Handles Slack bot actions",
        "Environment": {
          "Variables": {
            "token": {
              "Ref": "SlackBotTokenAD332752",
            },
          },
        },
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "SlackBotLambdaLog4E8DB3D7",
          },
        },
        "Role": {
          "Fn::GetAtt": [
            "SlackBotRole4F1E5090",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SlackBotLambdaLog4E8DB3D7": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "SlackBotRole4F1E5090": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies are used to simplify the solution.",
            },
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "The role will have access to invoke all models preferred by end user.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "Role for Slack bot lambda",
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SlackBotRoleDefaultPolicy4314B589": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Managed policies are used to simplify the solution.",
            },
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "The role will have access to invoke all models preferred by end user.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "bedrock:InvokeModel",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "SlackBotTokenAD332752",
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SlackBotRoleDefaultPolicy4314B589",
        "Roles": [
          {
            "Ref": "SlackBotRole4F1E5090",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SlackBotTokenAD332752": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "SecretString": "{"token":"xoxb-1234-5678-foo"}",
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
